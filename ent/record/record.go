// Code generated by ent, DO NOT EDIT.

package record

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the record type in the database.
	Label = "record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVideoURL holds the string denoting the video_url field in the database.
	FieldVideoURL = "video_url"
	// FieldVideoID holds the string denoting the video_id field in the database.
	FieldVideoID = "video_id"
	// FieldFileLocation holds the string denoting the file_location field in the database.
	FieldFileLocation = "file_location"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldRunID holds the string denoting the run_id field in the database.
	FieldRunID = "run_id"
	// Table holds the table name of the record in the database.
	Table = "records"
)

// Columns holds all SQL columns for record fields.
var Columns = []string{
	FieldID,
	FieldVideoURL,
	FieldVideoID,
	FieldFileLocation,
	FieldStatus,
	FieldRunID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// VideoURLValidator is a validator for the "video_url" field. It is called by the builders before save.
	VideoURLValidator func(string) error
	// VideoIDValidator is a validator for the "video_id" field. It is called by the builders before save.
	VideoIDValidator func(string) error
	// FileLocationValidator is a validator for the "file_location" field. It is called by the builders before save.
	FileLocationValidator func(string) error
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusDownloading Status = "downloading"
	StatusDownloaded  Status = "downloaded"
	StatusTranscribed Status = "transcribed"
	StatusTranslated  Status = "translated"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusDownloading, StatusDownloaded, StatusTranscribed, StatusTranslated:
		return nil
	default:
		return fmt.Errorf("record: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Record queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVideoURL orders the results by the video_url field.
func ByVideoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVideoURL, opts...).ToFunc()
}

// ByVideoID orders the results by the video_id field.
func ByVideoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVideoID, opts...).ToFunc()
}

// ByFileLocation orders the results by the file_location field.
func ByFileLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileLocation, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByRunID orders the results by the run_id field.
func ByRunID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRunID, opts...).ToFunc()
}
