// Code generated by ent, DO NOT EDIT.

package record

import (
	"entgo.io/ent/dialect/sql"
	"github.com/GrewalAS/yt-transcription-translation/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldID, id))
}

// VideoURL applies equality check predicate on the "video_url" field. It's identical to VideoURLEQ.
func VideoURL(v string) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldVideoURL, v))
}

// VideoID applies equality check predicate on the "video_id" field. It's identical to VideoIDEQ.
func VideoID(v string) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldVideoID, v))
}

// FileLocation applies equality check predicate on the "file_location" field. It's identical to FileLocationEQ.
func FileLocation(v string) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldFileLocation, v))
}

// VideoURLEQ applies the EQ predicate on the "video_url" field.
func VideoURLEQ(v string) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldVideoURL, v))
}

// VideoURLNEQ applies the NEQ predicate on the "video_url" field.
func VideoURLNEQ(v string) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldVideoURL, v))
}

// VideoURLIn applies the In predicate on the "video_url" field.
func VideoURLIn(vs ...string) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldVideoURL, vs...))
}

// VideoURLNotIn applies the NotIn predicate on the "video_url" field.
func VideoURLNotIn(vs ...string) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldVideoURL, vs...))
}

// VideoURLGT applies the GT predicate on the "video_url" field.
func VideoURLGT(v string) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldVideoURL, v))
}

// VideoURLGTE applies the GTE predicate on the "video_url" field.
func VideoURLGTE(v string) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldVideoURL, v))
}

// VideoURLLT applies the LT predicate on the "video_url" field.
func VideoURLLT(v string) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldVideoURL, v))
}

// VideoURLLTE applies the LTE predicate on the "video_url" field.
func VideoURLLTE(v string) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldVideoURL, v))
}

// VideoURLContains applies the Contains predicate on the "video_url" field.
func VideoURLContains(v string) predicate.Record {
	return predicate.Record(sql.FieldContains(FieldVideoURL, v))
}

// VideoURLHasPrefix applies the HasPrefix predicate on the "video_url" field.
func VideoURLHasPrefix(v string) predicate.Record {
	return predicate.Record(sql.FieldHasPrefix(FieldVideoURL, v))
}

// VideoURLHasSuffix applies the HasSuffix predicate on the "video_url" field.
func VideoURLHasSuffix(v string) predicate.Record {
	return predicate.Record(sql.FieldHasSuffix(FieldVideoURL, v))
}

// VideoURLEqualFold applies the EqualFold predicate on the "video_url" field.
func VideoURLEqualFold(v string) predicate.Record {
	return predicate.Record(sql.FieldEqualFold(FieldVideoURL, v))
}

// VideoURLContainsFold applies the ContainsFold predicate on the "video_url" field.
func VideoURLContainsFold(v string) predicate.Record {
	return predicate.Record(sql.FieldContainsFold(FieldVideoURL, v))
}

// VideoIDEQ applies the EQ predicate on the "video_id" field.
func VideoIDEQ(v string) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldVideoID, v))
}

// VideoIDNEQ applies the NEQ predicate on the "video_id" field.
func VideoIDNEQ(v string) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldVideoID, v))
}

// VideoIDIn applies the In predicate on the "video_id" field.
func VideoIDIn(vs ...string) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldVideoID, vs...))
}

// VideoIDNotIn applies the NotIn predicate on the "video_id" field.
func VideoIDNotIn(vs ...string) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldVideoID, vs...))
}

// VideoIDGT applies the GT predicate on the "video_id" field.
func VideoIDGT(v string) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldVideoID, v))
}

// VideoIDGTE applies the GTE predicate on the "video_id" field.
func VideoIDGTE(v string) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldVideoID, v))
}

// VideoIDLT applies the LT predicate on the "video_id" field.
func VideoIDLT(v string) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldVideoID, v))
}

// VideoIDLTE applies the LTE predicate on the "video_id" field.
func VideoIDLTE(v string) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldVideoID, v))
}

// VideoIDContains applies the Contains predicate on the "video_id" field.
func VideoIDContains(v string) predicate.Record {
	return predicate.Record(sql.FieldContains(FieldVideoID, v))
}

// VideoIDHasPrefix applies the HasPrefix predicate on the "video_id" field.
func VideoIDHasPrefix(v string) predicate.Record {
	return predicate.Record(sql.FieldHasPrefix(FieldVideoID, v))
}

// VideoIDHasSuffix applies the HasSuffix predicate on the "video_id" field.
func VideoIDHasSuffix(v string) predicate.Record {
	return predicate.Record(sql.FieldHasSuffix(FieldVideoID, v))
}

// VideoIDEqualFold applies the EqualFold predicate on the "video_id" field.
func VideoIDEqualFold(v string) predicate.Record {
	return predicate.Record(sql.FieldEqualFold(FieldVideoID, v))
}

// VideoIDContainsFold applies the ContainsFold predicate on the "video_id" field.
func VideoIDContainsFold(v string) predicate.Record {
	return predicate.Record(sql.FieldContainsFold(FieldVideoID, v))
}

// FileLocationEQ applies the EQ predicate on the "file_location" field.
func FileLocationEQ(v string) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldFileLocation, v))
}

// FileLocationNEQ applies the NEQ predicate on the "file_location" field.
func FileLocationNEQ(v string) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldFileLocation, v))
}

// FileLocationIn applies the In predicate on the "file_location" field.
func FileLocationIn(vs ...string) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldFileLocation, vs...))
}

// FileLocationNotIn applies the NotIn predicate on the "file_location" field.
func FileLocationNotIn(vs ...string) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldFileLocation, vs...))
}

// FileLocationGT applies the GT predicate on the "file_location" field.
func FileLocationGT(v string) predicate.Record {
	return predicate.Record(sql.FieldGT(FieldFileLocation, v))
}

// FileLocationGTE applies the GTE predicate on the "file_location" field.
func FileLocationGTE(v string) predicate.Record {
	return predicate.Record(sql.FieldGTE(FieldFileLocation, v))
}

// FileLocationLT applies the LT predicate on the "file_location" field.
func FileLocationLT(v string) predicate.Record {
	return predicate.Record(sql.FieldLT(FieldFileLocation, v))
}

// FileLocationLTE applies the LTE predicate on the "file_location" field.
func FileLocationLTE(v string) predicate.Record {
	return predicate.Record(sql.FieldLTE(FieldFileLocation, v))
}

// FileLocationContains applies the Contains predicate on the "file_location" field.
func FileLocationContains(v string) predicate.Record {
	return predicate.Record(sql.FieldContains(FieldFileLocation, v))
}

// FileLocationHasPrefix applies the HasPrefix predicate on the "file_location" field.
func FileLocationHasPrefix(v string) predicate.Record {
	return predicate.Record(sql.FieldHasPrefix(FieldFileLocation, v))
}

// FileLocationHasSuffix applies the HasSuffix predicate on the "file_location" field.
func FileLocationHasSuffix(v string) predicate.Record {
	return predicate.Record(sql.FieldHasSuffix(FieldFileLocation, v))
}

// FileLocationIsNil applies the IsNil predicate on the "file_location" field.
func FileLocationIsNil() predicate.Record {
	return predicate.Record(sql.FieldIsNull(FieldFileLocation))
}

// FileLocationNotNil applies the NotNil predicate on the "file_location" field.
func FileLocationNotNil() predicate.Record {
	return predicate.Record(sql.FieldNotNull(FieldFileLocation))
}

// FileLocationEqualFold applies the EqualFold predicate on the "file_location" field.
func FileLocationEqualFold(v string) predicate.Record {
	return predicate.Record(sql.FieldEqualFold(FieldFileLocation, v))
}

// FileLocationContainsFold applies the ContainsFold predicate on the "file_location" field.
func FileLocationContainsFold(v string) predicate.Record {
	return predicate.Record(sql.FieldContainsFold(FieldFileLocation, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Record {
	return predicate.Record(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Record {
	return predicate.Record(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Record {
	return predicate.Record(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Record {
	return predicate.Record(sql.FieldNotIn(FieldStatus, vs...))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Record) predicate.Record {
	return predicate.Record(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Record) predicate.Record {
	return predicate.Record(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Record) predicate.Record {
	return predicate.Record(sql.NotPredicates(p))
}
